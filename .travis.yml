# -*- coding: utf-8 -*-
# vim: ft=yaml
---
## Machine config
dist: bionic
sudo: required
services:
  - docker

## Language and cache config
language: ruby
cache: bundler

## Script to run for the test stage
script:
  # yamllint disable rule:line-length
  # Converge and verify the instance; `saltcheck` relies upon the `converge` as well
  - bin/kitchen verify "${INSTANCE}"
  # If a `master` instance, get the appropriate version of `saltcheck.py` (temporary)
  # Likewise, use a custom `cron.py` temporarily until the upstream PR is merged:
  # - https://github.com/saltstack/salt/pull/55016
  - if [ ! -z $(echo "${INSTANCE}" | grep \\-master-) ]; then
      bin/kitchen exec "${INSTANCE}" -c
        "sudo curl -o \$(find /usr/lib/ -type d -name modules | grep packages/salt/modules)/saltcheck.py
        https://raw.githubusercontent.com/myii/salt/fix/add-retcode/salt/modules/saltcheck.py";
      bin/kitchen exec "${INSTANCE}" -c
        "sudo curl -o \$(find /usr/lib/ -type d -name modules | grep packages/salt/modules)/cron.py
        https://raw.githubusercontent.com/myii/salt/fix/add-retcode/salt/modules/cron.py";
    fi
  # If a `master` instance, run all of the `saltcheck` tests
  - if [ ! -z $(echo "${INSTANCE}" | grep \\-master-) ]; then
      bin/kitchen exec "${INSTANCE}" -c
        "sudo salt-call
        --config-dir=/tmp/kitchen/etc/salt
        saltcheck.run_state_tests
        cron check_all=True";
    fi
  # yamllint enable rule:line-length

## Stages and jobs matrix
stages:
  - test
  - name: release
    if: branch = master AND type != pull_request
jobs:
  include:
    ## Define the test stage that runs the linters (and testing matrix, if applicable)

    # Run all of the linters in a single job
    - language: node_js
      node_js: lts/*
      env: Lint
      name: 'Lint: salt-lint, yamllint, rubocop & commitlint'
      before_install: skip
      script:
        # Install and run `salt-lint`
        - pip install --user salt-lint
        - git ls-files | grep '\.sls$\|\.jinja$\|\.j2$\|\.tmpl$\|\.tst$'
                       | xargs -I {} salt-lint {}
        # Install and run `yamllint`
        # Need at least `v1.17.0` for the `yaml-files` setting
        - pip install --user yamllint>=1.17.0
        - yamllint -s .
        # Install and run `rubocop`
        - gem install rubocop
        - rubocop -d
        # Install and run `commitlint`
        - npm install @commitlint/config-conventional -D
        - npm install @commitlint/travis-cli -D
        - commitlint-travis

    ## Define the rest of the matrix based on Kitchen testing
    # Make sure the instances listed below match up with
    # the `platforms` defined in `kitchen.yml`
    - env: INSTANCE=default-debian-10-master-py3
    # - env: INSTANCE=default-ubuntu-1804-master-py3
    # - env: INSTANCE=default-centos-8-master-py3
    # - env: INSTANCE=default-fedora-31-master-py3
    # - env: INSTANCE=default-opensuse-leap-151-master-py3
    # - env: INSTANCE=default-amazonlinux-2-master-py2
    # - env: INSTANCE=default-arch-base-latest-master-py2
    # - env: INSTANCE=default-debian-10-2019-2-py3
    # - env: INSTANCE=default-debian-9-2019-2-py3
    - env: INSTANCE=default-ubuntu-1804-2019-2-py3
    # - env: INSTANCE=default-centos-8-2019-2-py3
    # - env: INSTANCE=default-fedora-31-2019-2-py3
    - env: INSTANCE=default-opensuse-leap-151-2019-2-py3
    # - env: INSTANCE=default-centos-7-2019-2-py2
    - env: INSTANCE=default-amazonlinux-2-2019-2-py2
    # - env: INSTANCE=default-arch-base-latest-2019-2-py2
    - env: INSTANCE=default-fedora-30-2018-3-py3
    # - env: INSTANCE=default-debian-9-2018-3-py2
    # - env: INSTANCE=default-ubuntu-1604-2018-3-py2
    # - env: INSTANCE=default-centos-7-2018-3-py2
    # - env: INSTANCE=default-opensuse-leap-151-2018-3-py2
    # - env: INSTANCE=default-amazonlinux-2-2018-3-py2
    - env: INSTANCE=default-arch-base-latest-2018-3-py2
    # - env: INSTANCE=default-debian-8-2017-7-py2
    # - env: INSTANCE=default-ubuntu-1604-2017-7-py2
    - env: INSTANCE=default-centos-6-2017-7-py2
    # - env: INSTANCE=default-fedora-30-2017-7-py2
    # - env: INSTANCE=default-opensuse-leap-151-2017-7-py2
    # - env: INSTANCE=default-amazonlinux-2-2017-7-py2
    # - env: INSTANCE=default-arch-base-latest-2017-7-py2

    ## Define the release stage that runs `semantic-release`
    - stage: release
      language: node_js
      node_js: lts/*
      env: Release
      name: 'Run semantic-release inc. file updates to AUTHORS, CHANGELOG & FORMULA'
      before_install: skip
      script:
        # Update `AUTHORS.md`
        - export MAINTAINER_TOKEN=${GH_TOKEN}
        - go get github.com/myii/maintainer
        - maintainer contributor

        # Install all dependencies required for `semantic-release`
        - npm install @semantic-release/changelog@3 -D
        - npm install @semantic-release/exec@3 -D
        - npm install @semantic-release/git@7 -D
      deploy:
        provider: script
        skip_cleanup: true
        script:
          # Run `semantic-release`
          - npx semantic-release@15
